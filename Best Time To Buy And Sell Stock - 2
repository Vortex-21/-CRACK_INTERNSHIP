class Solution {
public:
    // int solve(bool can_buy,int idx,vector<int>&prices,vector<vector<int>>&dp){
    //     //base
    
    //     if(idx == prices.size())return 0;
    //     if(dp[can_buy][idx]==-1)
    //     {if(can_buy){
    //         int buy = -prices[idx] + solve(0,idx+1,prices,dp);
    //         int dont_buy = solve(1,idx+1,prices,dp);
    //         dp[can_buy][idx] = max(buy,dont_buy);
    //     }
    //     else{
    //         int sell =prices[idx] + solve(1,idx+1,prices,dp);
    //         int hold = solve(0,idx+1,prices,dp);
    //         dp[can_buy][idx] = max(sell,hold);
    //     }}
    //     return dp[can_buy][idx];
        
    // }
    int maxProfit(vector<int>& prices) {
        // vector<vector<int>>dp(2,vector<int>(prices.size()+1,-1));
        // return solve(1,0,prices,dp);
        int ans=0;
        for(int i=0;i<prices.size()-1;i++){
            if(prices[i] < prices[i+1]){
                ans+=prices[i+1]-prices[i];
            }
        }
        return ans;
    }
};
