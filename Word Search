class Solution {
public:
    vector<int>drow={-1,1,0,0};
    vector<int>dcol={0,0,-1,1};
    bool solve(vector<vector<char>>&board,string &word,int idx,int x,int y,vector<vector<int>>&visited){
        if(idx == word.size()){
            return 1;
        }
        int n = board.size();
        int m = board[0].size();

        for(int z=0;z<4;z++){
            int row = x + drow[z];
            int col = y + dcol[z];

            if(row>=0 and col>=0 and row<n and col<m and !visited[row][col] and board[row][col] == word[idx]){
                // cout<<word[idx]<<" ";
                visited[row][col]=1;
                if(solve(board,word,idx+1,row,col,visited))return 1;
                visited[row][col]=0;
            }
        }
        return 0;

        
    }
    bool exist(vector<vector<char>>& board, string word) {
        // solve(board,word,0,0,0);
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(word[0]==board[i][j]){
                    vector<vector<int>>visited(board.size(),vector<int>(board[0].size(),0));
                    visited[i][j]=1;
                    if(solve(board,word,1,i,j,visited))return 1;
                    
                }
            }
        }
        return 0;
    }
};
